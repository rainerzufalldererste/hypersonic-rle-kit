#ifndef codec_funcs_h__
#define codec_funcs_h__

typedef enum
{
  Extreme8,
  Extreme8Short,
  Extreme8Packed,
  Extreme8_1SLShort,
  Extreme8_3SL,
  Extreme8_3SLShort,
  Extreme8_7SL,
  Extreme8_7SLShort,
  Extreme8Single,
  Extreme8SingleShort,
  Extreme8PackedSingle,
  Extreme16Sym,
  Extreme16SymShort,
  Extreme16SymPacked,
  Extreme16Sym_1SLShort,
  Extreme16Sym_3SL,
  Extreme16Sym_3SLShort,
  Extreme16Sym_7SL,
  Extreme16Sym_7SLShort,
  Extreme16Byte,
  Extreme16ByteShort,
  Extreme16BytePacked,
  Extreme16Byte_1SLShort,
  Extreme16Byte_1SLShortGreedy,
  Extreme16Byte_3SL,
  Extreme16Byte_3SLShort,
  Extreme16Byte_3SLShortGreedy,
  Extreme16Byte_7SL,
  Extreme16Byte_7SLShort,
  Extreme16Byte_7SLShortGreedy,
  Extreme24Sym,
  Extreme24SymShort,
  Extreme24SymPacked,
  Extreme24Sym_1SLShort,
  Extreme24Sym_3SL,
  Extreme24Sym_3SLShort,
  Extreme24Sym_7SL,
  Extreme24Sym_7SLShort,
  Extreme24Byte,
  Extreme24ByteShort,
  Extreme24BytePacked,
  Extreme24Byte_1SLShort,
  Extreme24Byte_1SLShortGreedy,
  Extreme24Byte_3SL,
  Extreme24Byte_3SLShort,
  Extreme24Byte_3SLShortGreedy,
  Extreme24Byte_7SL,
  Extreme24Byte_7SLShort,
  Extreme24Byte_7SLShortGreedy,
  Extreme32Sym,
  Extreme32SymShort,
  Extreme32SymPacked,
  Extreme32Sym_1SLShort,
  Extreme32Sym_3SL,
  Extreme32Sym_3SLShort,
  Extreme32Sym_7SL,
  Extreme32Sym_7SLShort,
  Extreme32Byte,
  Extreme32ByteShort,
  Extreme32BytePacked,
  Extreme32Byte_1SLShort,
  Extreme32Byte_1SLShortGreedy,
  Extreme32Byte_3SL,
  Extreme32Byte_3SLShort,
  Extreme32Byte_3SLShortGreedy,
  Extreme32Byte_7SL,
  Extreme32Byte_7SLShort,
  Extreme32Byte_7SLShortGreedy,
  Extreme48Sym,
  Extreme48SymShort,
  Extreme48SymPacked,
  Extreme48Sym_1SLShort,
  Extreme48Sym_3SL,
  Extreme48Sym_3SLShort,
  Extreme48Sym_7SL,
  Extreme48Sym_7SLShort,
  Extreme48Byte,
  Extreme48ByteShort,
  Extreme48BytePacked,
  Extreme48Byte_1SLShort,
  Extreme48Byte_1SLShortGreedy,
  Extreme48Byte_3SL,
  Extreme48Byte_3SLShort,
  Extreme48Byte_3SLShortGreedy,
  Extreme48Byte_7SL,
  Extreme48Byte_7SLShort,
  Extreme48Byte_7SLShortGreedy,
  Extreme64Sym,
  Extreme64SymShort,
  Extreme64SymPacked,
  Extreme64Sym_1SLShort,
  Extreme64Sym_3SL,
  Extreme64Sym_3SLShort,
  Extreme64Sym_7SL,
  Extreme64Sym_7SLShort,
  Extreme64Byte,
  Extreme64ByteShort,
  Extreme64BytePacked,
  Extreme64Byte_1SLShort,
  Extreme64Byte_1SLShortGreedy,
  Extreme64Byte_3SL,
  Extreme64Byte_3SLShort,
  Extreme64Byte_3SLShortGreedy,
  Extreme64Byte_7SL,
  Extreme64Byte_7SLShort,
  Extreme64Byte_7SLShortGreedy,
  Extreme128Sym,
  Extreme128SymPacked,
  Extreme128Byte,
  Extreme128BytePacked,

  Rle8SH,
  Extreme8MultiMTF128,

  LowEntropy,
  LowEntropySingle,
  LowEntropyShort,
  LowEntropyShortSingle,

  MultiMTF128,
  MultiMTF256,
  BitMultiMTF8,
  BitMultiMTF16,

  MemCopy,

  CodecCount
} codec_t;

static const char *codecNames[] =
{
  "8 Bit                         ",
  "8 Bit Short                   ",
  "8 Bit Packed                  ",
  "8 Bit 1LUT Short              ",
  "8 Bit 3LUT                    ",
  "8 Bit 3LUT Short              ",
  "8 Bit 7LUT                    ",
  "8 Bit 7LUT Short              ",
  "8 Bit Single                  ",
  "8 Bit Single Short            ",
  "8 Bit Single Packed           ",
  "16 Bit (Symbol)               ",
  "16 Bit Short (Symbol)         ",
  "16 Bit Packed (Symbol)        ",
  "16 Bit 1LUT Short (Symbol)    ",
  "16 Bit 3LUT (Symbol)          ",
  "16 Bit 3LUT Short (Symbol)    ",
  "16 Bit 7LUT (Symbol)          ",
  "16 Bit 7LUT Short (Symbol)    ",
  "16 Bit (Byte)                 ",
  "16 Bit Short (Byte)           ",
  "16 Bit Packed (Byte)          ",
  "16 Bit 1LUT Short (Byte)      ",
  "16 Bit 1LUT Short Grdy (Byte) ",
  "16 Bit 3LUT (Byte)            ",
  "16 Bit 3LUT Short (Byte)      ",
  "16 Bit 3LUT Short Grdy (Byte) ",
  "16 Bit 7LUT (Byte)            ",
  "16 Bit 7LUT Short (Byte)      ",
  "16 Bit 7LUT Short Grdy (Byte) ",
  "24 Bit (Symbol)               ",
  "24 Bit Short (Symbol)         ",
  "24 Bit Packed (Symbol)        ",
  "24 Bit 1LUT Short (Symbol)    ",
  "24 Bit 3LUT (Symbol)          ",
  "24 Bit 3LUT Short (Symbol)    ",
  "24 Bit 7LUT (Symbol)          ",
  "24 Bit 7LUT Short (Symbol)    ",
  "24 Bit (Byte)                 ",
  "24 Bit Short (Byte)           ",
  "24 Bit Packed (Byte)          ",
  "24 Bit 1LUT Short (Byte)      ",
  "24 Bit 1LUT Short Grdy (Byte) ",
  "24 Bit 3LUT (Byte)            ",
  "24 Bit 3LUT Short (Byte)      ",
  "24 Bit 3LUT Short Grdy (Byte) ",
  "24 Bit 7LUT (Byte)            ",
  "24 Bit 7LUT Short (Byte)      ",
  "24 Bit 7LUT Short Grdy (Byte) ",
  "32 Bit (Symbol)               ",
  "32 Bit Short (Symbol)         ",
  "32 Bit Packed (Symbol)        ",
  "32 Bit 1LUT Short (Symbol)    ",
  "32 Bit 3LUT (Symbol)          ",
  "32 Bit 3LUT Short (Symbol)    ",
  "32 Bit 7LUT (Symbol)          ",
  "32 Bit 7LUT Short (Symbol)    ",
  "32 Bit (Byte)                 ",
  "32 Bit Short (Byte)           ",
  "32 Bit Packed (Byte)          ",
  "32 Bit 1LUT Short (Byte)      ",
  "32 Bit 1LUT Short Grdy (Byte) ",
  "32 Bit 3LUT (Byte)            ",
  "32 Bit 3LUT Short (Byte)      ",
  "32 Bit 3LUT Short Grdy (Byte) ",
  "32 Bit 7LUT (Byte)            ",
  "32 Bit 7LUT Short (Byte)      ",
  "32 Bit 7LUT Short Grdy (Byte) ",
  "48 Bit (Symbol)               ",
  "48 Bit Short (Symbol)         ",
  "48 Bit Packed (Symbol)        ",
  "48 Bit 1LUT Short (Symbol)    ",
  "48 Bit 3LUT (Symbol)          ",
  "48 Bit 3LUT Short (Symbol)    ",
  "48 Bit 7LUT (Symbol)          ",
  "48 Bit 7LUT Short (Symbol)    ",
  "48 Bit (Byte)                 ",
  "48 Bit Short (Byte)           ",
  "48 Bit Packed (Byte)          ",
  "48 Bit 1LUT Short (Byte)      ",
  "48 Bit 1LUT Short Grdy (Byte) ",
  "48 Bit 3LUT (Byte)            ",
  "48 Bit 3LUT Short (Byte)      ",
  "48 Bit 3LUT Short Grdy (Byte) ",
  "48 Bit 7LUT (Byte)            ",
  "48 Bit 7LUT Short (Byte)      ",
  "48 Bit 7LUT Short Grdy (Byte) ",
  "64 Bit (Symbol)               ",
  "64 Bit Short (Symbol)         ",
  "64 Bit Packed (Symbol)        ",
  "64 Bit 1LUT Short (Symbol)    ",
  "64 Bit 3LUT (Symbol)          ",
  "64 Bit 3LUT Short (Symbol)    ",
  "64 Bit 7LUT (Symbol)          ",
  "64 Bit 7LUT Short (Symbol)    ",
  "64 Bit (Byte)                 ",
  "64 Bit Short (Byte)           ",
  "64 Bit Packed (Byte)          ",
  "64 Bit 1LUT Short (Byte)      ",
  "64 Bit 1LUT Short Grdy (Byte) ",
  "64 Bit 3LUT (Byte)            ",
  "64 Bit 3LUT Short (Byte)      ",
  "64 Bit 3LUT Short Grdy (Byte) ",
  "64 Bit 7LUT (Byte)            ",
  "64 Bit 7LUT Short (Byte)      ",
  "64 Bit 7LUT Short Grdy (Byte) ",
  "128 Bit (Symbol)              ",
  "128 Bit Packed (Symbol)       ",
  "128 Bit (Byte)                ",
  "128 Bit Packed (Byte)         ",
  "8 Bit RLE + Huffman-esque     ",
  "8 Bit MMTF 128                ",
  "Low Entropy                   ",
  "Low Entropy Single            ",
  "Low Entropy Short             ",
  "Low Entropy Short Single      ",
  "Multi MTF 128 Bit (Transform) ",
  "Multi MTF 256 Bit (Transform) ",
  "Bit MMTF 8 Bit (Transform)    ",
  "Bit MMTF 16 Bit (Transform)   ",
  "memcpy                        ",
};

_STATIC_ASSERT(ARRAYSIZE(codecNames) == CodecCount);

typedef struct
{
  uint32_t (*compress_func)(IN const uint8_t *pIn, const uint32_t inSize, OUT uint8_t *pOut, const uint32_t outSize);
  uint32_t (*decompress_func)(IN const uint8_t *pIn, const uint32_t inSize, OUT uint8_t *pOut, const uint32_t outSize);
} codec_callback_t;

#define CODEC_CALLBACKS_FROM_NAME(name) { name ## _compress, name ## _decompress }

static codec_callback_t codecCallbacks[] =
{
  { rle8_multi_compress, rle8_decompress },
  CODEC_CALLBACKS_FROM_NAME(rle8_multi_short),
  { rle8_packed_multi_compress, rle8_packed_decompress },
  CODEC_CALLBACKS_FROM_NAME(rle8_1symlut_short),
  CODEC_CALLBACKS_FROM_NAME(rle8_3symlut),
  CODEC_CALLBACKS_FROM_NAME(rle8_3symlut_short),
  CODEC_CALLBACKS_FROM_NAME(rle8_7symlut),
  CODEC_CALLBACKS_FROM_NAME(rle8_7symlut_short),
  
  { rle8_single_compress, rle8_decompress },
  CODEC_CALLBACKS_FROM_NAME(rle8_single_short),
  { rle8_packed_single_compress, rle8_packed_decompress },

  CODEC_CALLBACKS_FROM_NAME(rle16_sym),
  CODEC_CALLBACKS_FROM_NAME(rle16_sym_short),
  CODEC_CALLBACKS_FROM_NAME(rle16_sym_packed),
  CODEC_CALLBACKS_FROM_NAME(rle16_1symlut_sym_short),
  CODEC_CALLBACKS_FROM_NAME(rle16_3symlut_sym),
  CODEC_CALLBACKS_FROM_NAME(rle16_3symlut_sym_short),
  CODEC_CALLBACKS_FROM_NAME(rle16_7symlut_sym),
  CODEC_CALLBACKS_FROM_NAME(rle16_7symlut_sym_short),

  CODEC_CALLBACKS_FROM_NAME(rle16_byte),
  CODEC_CALLBACKS_FROM_NAME(rle16_byte_short),
  CODEC_CALLBACKS_FROM_NAME(rle16_byte_packed),
  CODEC_CALLBACKS_FROM_NAME(rle16_1symlut_byte_short),
  { rle16_1symlut_byte_short_compress_greedy, rle16_1symlut_byte_short_decompress },
  CODEC_CALLBACKS_FROM_NAME(rle16_3symlut_byte),
  CODEC_CALLBACKS_FROM_NAME(rle16_3symlut_byte_short),
  { rle16_3symlut_byte_short_compress_greedy, rle16_3symlut_byte_short_decompress },
  CODEC_CALLBACKS_FROM_NAME(rle16_7symlut_byte),
  CODEC_CALLBACKS_FROM_NAME(rle16_7symlut_byte_short),
  { rle16_7symlut_byte_short_compress_greedy, rle16_7symlut_byte_short_decompress },

  CODEC_CALLBACKS_FROM_NAME(rle24_sym),
  CODEC_CALLBACKS_FROM_NAME(rle24_sym_short),
  CODEC_CALLBACKS_FROM_NAME(rle24_sym_packed),
  CODEC_CALLBACKS_FROM_NAME(rle24_1symlut_sym_short),
  CODEC_CALLBACKS_FROM_NAME(rle24_3symlut_sym),
  CODEC_CALLBACKS_FROM_NAME(rle24_3symlut_sym_short),
  CODEC_CALLBACKS_FROM_NAME(rle24_7symlut_sym),
  CODEC_CALLBACKS_FROM_NAME(rle24_7symlut_sym_short),

  CODEC_CALLBACKS_FROM_NAME(rle24_byte),
  CODEC_CALLBACKS_FROM_NAME(rle24_byte_short),
  CODEC_CALLBACKS_FROM_NAME(rle24_byte_packed),
  CODEC_CALLBACKS_FROM_NAME(rle24_1symlut_byte_short),
  { rle24_1symlut_byte_short_compress_greedy, rle24_1symlut_byte_short_decompress },
  CODEC_CALLBACKS_FROM_NAME(rle24_3symlut_byte),
  CODEC_CALLBACKS_FROM_NAME(rle24_3symlut_byte_short),
  { rle24_3symlut_byte_short_compress_greedy, rle24_3symlut_byte_short_decompress },
  CODEC_CALLBACKS_FROM_NAME(rle24_7symlut_byte),
  CODEC_CALLBACKS_FROM_NAME(rle24_7symlut_byte_short),
  { rle24_7symlut_byte_short_compress_greedy, rle24_7symlut_byte_short_decompress },

  CODEC_CALLBACKS_FROM_NAME(rle32_sym),
  CODEC_CALLBACKS_FROM_NAME(rle32_sym_short),
  CODEC_CALLBACKS_FROM_NAME(rle32_sym_packed),
  CODEC_CALLBACKS_FROM_NAME(rle32_1symlut_sym_short),
  CODEC_CALLBACKS_FROM_NAME(rle32_3symlut_sym),
  CODEC_CALLBACKS_FROM_NAME(rle32_3symlut_sym_short),
  CODEC_CALLBACKS_FROM_NAME(rle32_7symlut_sym),
  CODEC_CALLBACKS_FROM_NAME(rle32_7symlut_sym_short),

  CODEC_CALLBACKS_FROM_NAME(rle32_byte),
  CODEC_CALLBACKS_FROM_NAME(rle32_byte_short),
  CODEC_CALLBACKS_FROM_NAME(rle32_byte_packed),
  CODEC_CALLBACKS_FROM_NAME(rle32_1symlut_byte_short),
  { rle32_1symlut_byte_short_compress_greedy, rle32_1symlut_byte_short_decompress },
  CODEC_CALLBACKS_FROM_NAME(rle32_3symlut_byte),
  CODEC_CALLBACKS_FROM_NAME(rle32_3symlut_byte_short),
  { rle32_3symlut_byte_short_compress_greedy, rle32_3symlut_byte_short_decompress },
  CODEC_CALLBACKS_FROM_NAME(rle32_7symlut_byte),
  CODEC_CALLBACKS_FROM_NAME(rle32_7symlut_byte_short),
  { rle32_7symlut_byte_short_compress_greedy, rle32_7symlut_byte_short_decompress },

  CODEC_CALLBACKS_FROM_NAME(rle48_sym),
  CODEC_CALLBACKS_FROM_NAME(rle48_sym_short),
  CODEC_CALLBACKS_FROM_NAME(rle48_sym_packed),
  CODEC_CALLBACKS_FROM_NAME(rle48_1symlut_sym_short),
  CODEC_CALLBACKS_FROM_NAME(rle48_3symlut_sym),
  CODEC_CALLBACKS_FROM_NAME(rle48_3symlut_sym_short),
  CODEC_CALLBACKS_FROM_NAME(rle48_7symlut_sym),
  CODEC_CALLBACKS_FROM_NAME(rle48_7symlut_sym_short),

  CODEC_CALLBACKS_FROM_NAME(rle48_byte),
  CODEC_CALLBACKS_FROM_NAME(rle48_byte_short),
  CODEC_CALLBACKS_FROM_NAME(rle48_byte_packed),
  CODEC_CALLBACKS_FROM_NAME(rle48_1symlut_byte_short),
  { rle48_1symlut_byte_short_compress_greedy, rle48_1symlut_byte_short_decompress },
  CODEC_CALLBACKS_FROM_NAME(rle48_3symlut_byte),
  CODEC_CALLBACKS_FROM_NAME(rle48_3symlut_byte_short),
  { rle48_3symlut_byte_short_compress_greedy, rle48_3symlut_byte_short_decompress },
  CODEC_CALLBACKS_FROM_NAME(rle48_7symlut_byte),
  CODEC_CALLBACKS_FROM_NAME(rle48_7symlut_byte_short),
  { rle48_7symlut_byte_short_compress_greedy, rle48_7symlut_byte_short_decompress },

  CODEC_CALLBACKS_FROM_NAME(rle64_sym),
  CODEC_CALLBACKS_FROM_NAME(rle64_sym_short),
  CODEC_CALLBACKS_FROM_NAME(rle64_sym_packed),
  CODEC_CALLBACKS_FROM_NAME(rle64_1symlut_sym_short),
  CODEC_CALLBACKS_FROM_NAME(rle64_3symlut_sym),
  CODEC_CALLBACKS_FROM_NAME(rle64_3symlut_sym_short),
  CODEC_CALLBACKS_FROM_NAME(rle64_7symlut_sym),
  CODEC_CALLBACKS_FROM_NAME(rle64_7symlut_sym_short),

  CODEC_CALLBACKS_FROM_NAME(rle64_byte),
  CODEC_CALLBACKS_FROM_NAME(rle64_byte_short),
  CODEC_CALLBACKS_FROM_NAME(rle64_byte_packed),
  CODEC_CALLBACKS_FROM_NAME(rle64_1symlut_byte_short),
  { rle64_1symlut_byte_short_compress_greedy, rle64_1symlut_byte_short_decompress },
  CODEC_CALLBACKS_FROM_NAME(rle64_3symlut_byte),
  CODEC_CALLBACKS_FROM_NAME(rle64_3symlut_byte_short),
  { rle64_3symlut_byte_short_compress_greedy, rle64_3symlut_byte_short_decompress },
  CODEC_CALLBACKS_FROM_NAME(rle64_7symlut_byte),
  CODEC_CALLBACKS_FROM_NAME(rle64_7symlut_byte_short),
  { rle64_7symlut_byte_short_compress_greedy, rle64_7symlut_byte_short_decompress },

  CODEC_CALLBACKS_FROM_NAME(rle128_sym),
  CODEC_CALLBACKS_FROM_NAME(rle128_sym_packed),

  CODEC_CALLBACKS_FROM_NAME(rle128_byte),
  CODEC_CALLBACKS_FROM_NAME(rle128_byte_packed),

  CODEC_CALLBACKS_FROM_NAME(rle8_sh),
  CODEC_CALLBACKS_FROM_NAME(rle8_mmtf128),

  CODEC_CALLBACKS_FROM_NAME(rle8_low_entropy),
  { rle8_low_entropy_compress_only_max_frequency, rle8_low_entropy_decompress },
  CODEC_CALLBACKS_FROM_NAME(rle8_low_entropy_short),
  { rle8_low_entropy_short_compress_only_max_frequency, rle8_low_entropy_short_decompress },

  { mmtf128_encode, mmtf128_decode },
  { mmtf256_encode, mmtf256_decode },
  { bitmmtf8_encode, bitmmtf8_decode },
  { bitmmtf16_encode, bitmmtf16_decode },

  { NULL, NULL }
};

_STATIC_ASSERT(ARRAYSIZE(codecCallbacks) == CodecCount);

#endif // codec_funcs_h__
